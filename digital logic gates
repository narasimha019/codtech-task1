//verilog code for AND gate
module AND_Gate (
    input wire A,
    input wire B,
    output wire Y
);

assign Y = A & B;

endmodule
  // test benche  for AND gate
  module AND_Gate_tb;

reg A;
reg B;
wire Y;

AND_Gate uut (
    .A(A),
    .B(B),
    .Y(Y)
);

initial begin
    // Initialize inputs
    A = 0;
    B = 0;

    // Apply test vectors
    #10 A = 0; B = 1;
    #10 A = 1; B = 0;
    #10 A = 1; B = 1;
    #10 $finish;
end

initial begin
    $monitor("At time %t, A = %b, B = %b, Y = %b", $time, A, B, Y);
end

endmodule

// verilog code for the 1bit full adder
  module Full_Adder (
    input wire A,
    input wire B,
    input wire Cin,
    output wire Sum,
    output wire Cout
);

assign {Cout, Sum} = A + B + Cin;

endmodule

  // test bench for 1bit full adder
  module Full_Adder_tb;

reg A;
reg B;
reg Cin;
wire Sum;
wire Cout;

Full_Adder uut (
    .A(A),
    .B(B),
    .Cin(Cin),
    .Sum(Sum),
    .Cout(Cout)
);

initial begin
    // Initialize inputs
    A = 0;
    B = 0;
    Cin = 0;

    // Apply test vectors
    #10 A = 0; B = 0; Cin = 1;
    #10 A = 0; B = 1; Cin = 0;
    #10 A = 0; B = 1; Cin = 1;
    #10 A = 1; B = 0; Cin = 0;
    #10 A = 1; B = 0; Cin = 1;
    #10 A = 1; B = 1; Cin = 0;
    #10 A = 1; B = 1; Cin = 1;
    #10 $finish;
end

initial begin
    $monitor("At time %t, A = %b, B = %b, Cin = %b, Sum = %b, Cout = %b", $time, A, B, Cin, Sum, Cout);
end

endmodule

  // veri logcode for  2:1 multiplexer

  module MUX2to1 (
    input wire A,
    input wire B,
    input wire Sel,
    output wire Y
);

assign Y = Sel ? B : A;

endmodule

  // test bench for 2:1 mux
  module MUX2to1_tb;

reg A;
reg B;
reg Sel;
wire Y;

MUX2to1 uut (
    .A(A),
    .B(B),
    .Sel(Sel),
    .Y(Y)
);

initial begin
    // Initialize inputs
    A = 0;
    B = 0;
    Sel = 0;

    // Apply test vectors
    #10 A = 0; B = 1; Sel = 0;
    #10 A = 0; B = 1; Sel = 1;
    #10 A = 1; B = 0; Sel = 0;
    #10 A = 1; B = 0; Sel = 1;
    #10 A = 1; B = 1; Sel = 0;
    #10 A = 1; B = 1; Sel = 1;
    #10 $finish;
end

initial begin
    $monitor("At time %t, A = %b, B = %b, Sel = %b, Y = %b", $time, A, B, Sel, Y);
end

endmodule
